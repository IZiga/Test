import apiai    # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å DiologFlow
import telebot  # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç–æ–º
from telebot import types
import config   # FIXME
import json
import logging  # –î–ª—è –ª–æ–≥–æ–≤
import requests
import vector_fun



file_logg = "app.log"
dir_theory = 'Theory'
dir_vector = dir_theory + '/Vector/'
message_history = {}  # {chat_id: [(message_id, message), (message_id, message)]}
data_flag = {}


def communication_message(message: str) -> str:
    """
    –û—Ç–≤–µ—â–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–≤–µ—Ç –ø—Ä–æ–¥—É–º—ã–≤–∞–µ—Ç —á–µ—Ä–µ–∑ Dialogflow
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–≤–µ—Ç
    :return: –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    request = apiai.ApiAI('ec8ae2d24ad54ae7bb0da15c61d9c5c6').text_request()
    prog_logger.debug(request)
    request.lang = 'ru'
    request.session_id = 'session_1'
    request.query = message
    prog_logger.debug(request)
    response = json.loads(request.getresponse().read().decode('utf-8'))
    action = response['result']['action']
    speech = response['result']['fulfillment']['speech'] if action else "—è —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é"     # –û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    prog_logger.debug(speech)
    return speech


# ----- –î–ª—è –õ–æ–≥–æ–≤ --------------------------------------------------------------------|
prog_logger = logging.getLogger("program")   # –ò–º—è –ª–æ–≥–æ–≤
prog_logger.setLevel(logging.INFO)   # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
bot_logger = logging.getLogger("bot")
bot_logger.setLevel(logging.INFO)
user_logger = logging.getLogger("user")
user_logger.setLevel(logging.INFO)
fh = logging.FileHandler(file_logg, mode='w')
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)

prog_logger.addHandler(fh)
prog_logger.info("Program started")
bot_logger.addHandler(fh)
user_logger.addHandler(fh)
# --------------------------------------------------------------------------------------|

bot = telebot.TeleBot(config.TOKEN)






@bot.message_handler(commands=['start'])    # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—ã—Ç–∏—è –ø—Ä–∏ –ø–æ–ª—É—â–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start
def welcome(event):
    user_name = event.chat.first_name
    chat_id = event.chat.id
    message = event.text
    del_flag(chat_id)
    message_bot = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π –≤—ã–±–∏—Ä–∏ —á—Ç–æ –Ω–∞–¥–æ –∏ –ø–æ—à–ª–∏ –¥–∞–ª—å—à–µ'  # –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    keyboard = types.InlineKeyboardMarkup()
    key_zad = types.InlineKeyboardButton(text='‚å®Ô∏è –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä', callback_data='calculator')
    keyboard.add(key_zad)
    key_theory = types.InlineKeyboardButton(text='üìö –¢–µ–æ—Ä–∏—è', callback_data='theory')
    keyboard.add(key_theory)
    bot_logger.info(f'to {user_name}: ({id}): {message_bot}')
    bot.send_message(chat_id, message_bot, reply_markup=keyboard)


@bot.message_handler(content_types=['text'])
def func1(event):
    # ms_json = event.json
    # print(json.dumps(ms_json, indent=2))
    user_name = event.chat.first_name
    chat_id = event.chat.id
    message = event.text
    if have_flag(chat_id, 'calc_angle_3D'):
        res, file_name = vector_fun.calc_angel_3D(message)
        message_bot =f'–£–≥–æ–ª —Ä–∞–≤–µ–Ω {res}¬∞'
        photo = open(file_name, 'rb')
        bot.send_photo(chat_id, photo, caption=message_bot)
        del_flag(chat_id)
    message_bot = communication_message(message)  # –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    user_logger.info(f'{user_name}: ({chat_id}): {message}')
    bot_logger.info(f'to {user_name}: ({chat_id}): {message_bot}')
    try:
        message_history[chat_id].append((event.id, message))
    except KeyError:
        message_history[chat_id] = [(event.id, message)]
    bot.send_message(event.chat.id, message_bot)


@bot.callback_query_handler(func=lambda call: True)
def callback_worker(call):  # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫
    event = call.message
    user_name = event.chat.first_name
    chat_id = event.chat.id
    message = call.data
    user_logger.info(f'{user_name}: ({id}): {message}')
    del_flag(chat_id)

    # ----------------------------------------–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä---------------------------------------------------------------
    if call.data == 'calculator':
        keyboard_calculator = types.InlineKeyboardMarkup()
        key_calc_angle_3D = types.InlineKeyboardButton(text='–£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ –≤ 3D', callback_data='calc_angle_3D')
        keyboard_calculator.add(key_calc_angle_3D)
        message_bot = '–ü–æ–∫–∞ –≤—ã–±–æ—Ä –Ω–µ –±–æ–ª—å—à–æ–π:'  # –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        bot_logger.info(f'to {user_name}: ({id}): {message_bot}')
        bot.send_message(chat_id, message_bot, reply_markup=keyboard_calculator)

    if call.data == 'calc_angle_3D':
        add_flag(chat_id, message)
        message_bot = '–í—ã—á–∏—Å–ª—è–µ—Ç —É–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏. –í–µ–∫—Ç–æ—Ä–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å a=(1,3,4) b=(5,6,7) –∏ —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç –ó–ë–°.' \
                      '–ü–æ –¥—Ä—É–≥–æ–º—É –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'  # –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        bot.send_message(chat_id, message_bot)

    # ------------------------------------------------------------------------------------------------------------------

    # ----------------------------------------–¢–µ–æ—Ä–∏—è--------------------------------------------------------------------
    if call.data == 'theory':
        keyboard_theory = types.InlineKeyboardMarkup()
        # Vector
        key_vector = types.InlineKeyboardButton(text='–í–µ–∫—Ç–æ—Ä–∞', callback_data='Vector')
        keyboard_theory.add(key_vector)
        # Complex_number
        key_—Åomplex_num = types.InlineKeyboardButton(text='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞', callback_data='—Åomplex_num')
        keyboard_theory.add(key_—Åomplex_num)

        key_ = types.InlineKeyboardButton(text='......', callback_data='_')
        keyboard_theory.add(key_)
        message_bot = '–≠—Ç–æ —Ç–µ–æ—Ä–∏–∏:'  # –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
        bot_logger.info(f'to {user_name}: ({id}): {message_bot}')
        bot.send_message(chat_id, message_bot, reply_markup=keyboard_theory)

    # ********************************************* –¢–µ–æ—Ä–∏—è –æ –≤–µ–∫—Ç–æ—Ä–∞—Ö **************************************************
    if call.data == 'Vector':
        keyboard_vector = types.InlineKeyboardMarkup()
        key_base = types.InlineKeyboardButton(text='–í–µ–∫—Ç–æ—Ä', callback_data='base_vector')
        keyboard_vector.add(key_base)
        key_direction_vector = types.InlineKeyboardButton(text='–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö –∫–æ—Å–∏–Ω—É—Å–æ–≤', callback_data='direction_vector')
        keyboard_vector.add(key_direction_vector)
        key_orthogonal = types.InlineKeyboardButton(text='–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤ ', callback_data='orthogonal')
        keyboard_vector.add(key_orthogonal)
        key_collinear = types.InlineKeyboardButton(text='–ö–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤', callback_data='collinear')
        keyboard_vector.add(key_collinear)
        key_coplanar = types.InlineKeyboardButton(text='–ö–æ–º–ø–ª–∞–Ω–∞—Ä–Ω–æ—Å—Ç—å –≤–µ–∫—Ç–æ—Ä–æ–≤', callback_data='coplanar')
        keyboard_vector.add(key_coplanar)
        key_angle = types.InlineKeyboardButton(text='–£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏', callback_data='angle')
        keyboard_vector.add(key_angle)
        key_projection = types.InlineKeyboardButton(text='–ü—Ä–æ–µ–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞', callback_data='projection')
        keyboard_vector.add(key_projection)
        key_scalar_product = types.InlineKeyboardButton(text='–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤', callback_data='scalar_product')
        keyboard_vector.add(key_scalar_product)
        key_vector_product = types.InlineKeyboardButton(text='–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤', callback_data='vector_product')
        keyboard_vector.add(key_vector_product)
        key_mixed_product = types.InlineKeyboardButton(text='–°–º–µ—à–∞–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–æ–≤', callback_data='mixed_product')
        keyboard_vector.add(key_mixed_product)
        key_linearly_vectors = types.InlineKeyboardButton(text='–õ–∏–Ω–µ–π–Ω–æ –∑–∞–≤–∏—Å–∏–º—ã–µ –∏ –ª–∏–Ω–µ–π–Ω–æ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–µ –≤–µ–∫—Ç–æ—Ä–∞', callback_data='linearly_vectors')
        keyboard_vector.add(key_linearly_vectors)
        key_decomposition = types.InlineKeyboardButton(text='–†–∞–∑–ª–æ–∂–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –ø–æ –±–∞–∑–∏—Å—É', callback_data='decomposition')
        keyboard_vector.add(key_decomposition)
        message_bot = '–í —Ñ–∏–∑–∏–∫–µ –∏ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ –≤–µ–∫—Ç–æ—Ä - —ç—Ç–æ –≤–µ–ª–∏—á–∏–Ω–∞, –∫–æ—Ç–æ—Ä–∞—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É–µ—Ç—Å—è —Å–≤–æ–∏–º —á–∏—Å–ª–µ–Ω–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º.–í –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –≤–µ–∫—Ç–æ—Ä–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ª—é–±–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ—Ç—Ä–µ–∑–æ–∫. –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ –≤–µ–∫—Ç–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –≤–∏–¥–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ—Ç—Ä–µ–∑–∫–æ–≤ –ø—Ä—è–º–æ–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –¥–ª–∏–Ω—ã.'
        bot_logger.info(f'to {user_name}: ({id}): {message_bot}')
        bot.send_message(chat_id, message_bot, reply_markup=keyboard_vector)
    if call.data == 'base_vector':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–≤–µ–∫—Ç–æ—Ä–∞.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–î–ª–∏–Ω–∞_–≤–µ–∫—Ç–æ—Ä–∞.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–ö–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω—ã–µ_–≤–µ–∫—Ç–æ—Ä–∞.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–ö–æ–º–ø–ª–∞–Ω–∞—Ä–Ω—ã–µ_–≤–µ–∫—Ç–æ—Ä–∞.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–æ—Å—Ç—å_–≤–µ–∫—Ç–æ—Ä–∞.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–ù—É–ª–µ–≤–æ–π_–≤–µ–∫—Ç–æ—Ä.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–†–∞–≤–Ω—ã–π_–≤–µ–∫—Ç–æ—Ä.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'direction_vector':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ_–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö_–∫–æ—Å–∏–Ω—É—Å–æ–≤.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–§–æ—Ä–º—É–ª–∞_–Ω–∞–ø—Ä–∞–≤–ª—è—é—â–∏—Ö_–∫–æ—Å–∏–Ω—É—Å–æ–≤.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'orthogonal':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–û—Ä—Ç–æ–≥–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å.png', 'rb'), ))
        bot.send_media_group(chat_id, photos)
    if call.data == 'collinear':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–ö–æ–ª–ª–∏–Ω–µ–∞—Ä–Ω–æ—Å—Ç—å.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'coplanar':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–ö–æ–º–ø–ª–∞–Ω–∞—Ä–Ω–æ—Å—Ç—å.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'angle':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–£–≥–æ–ª –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'projection':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–ø—Ä–æ–µ–∫—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–∞.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'scalar_product':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ-1.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ-2.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'vector_product':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ-1.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–í–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ-2.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'mixed_product':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–°–º–µ—à–∞–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ-1.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–°–º–µ—à–∞–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ-2.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'linearly_vectors':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–õ–∏–Ω–µ–π–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä–∞.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    if call.data == 'decomposition':
        photos = []
        photos.append(types.InputMediaPhoto(open(dir_vector + '–†–∞–∑–ª–æ–∂–µ–Ω–∏—è –ø–æ –±–∞–∑–∏—Å—É.png', 'rb')))
        photos.append(types.InputMediaPhoto(open(dir_vector + '–†–∞–∑–ª–æ–∂–µ–Ω–∏—è –ø–æ –±–∞–∑–∏—Å—É-1.png', 'rb')))
        bot.send_media_group(chat_id, photos)
    # ******************************************************************************************************************

    # ********************************************* –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞ **************************************************
    if call.data == '—Åomplex_num':
        keyboard_—Åomplex_num = types.InlineKeyboardMarkup()
        key_base = types.InlineKeyboardButton(text='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞', callback_data='—Åomplex_base')
        keyboard_—Åomplex_num.add(key_base)
        key_geometric_complex = types.InlineKeyboardButton(text='–ì–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —á–∏—Å–µ–ª', callback_data='geometric_complex')
        keyboard_—Åomplex_num.add(key_geometric_complex)
        key_actions_complex = types.InlineKeyboardButton(text='–¥–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏', callback_data='actions_complex')
        keyboard_—Åomplex_num.add(key_actions_complex)
        key_complex_tfn_efn = types.InlineKeyboardButton(text='–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —á–∏—Å–ª–∞ —Ç—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–æ–π –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ñ–æ—Ä–º–∞—Ö –∑–∞–ø–∏—Å–∏', callback_data='complex_tfn_efn')
        keyboard_—Åomplex_num.add(key_complex_tfn_efn)
        message_bot = '–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞'
        bot_logger.info(f'to {user_name}: ({id}): {message_bot}')
        bot.send_message(chat_id, message_bot, reply_markup=keyboard_—Åomplex_num)
    if call.data == '—Åomplex_base':
        message_bot = 'https://telegra.ph/Kompleksnoe-chislo-02-07'
        bot.send_message(chat_id, message_bot,)
    if call.data == 'geometric_complex':
        message_bot = 'https://telegra.ph/Geometricheskoe-predstavleniya-kompleksnyh-chisel-02-08'
        bot.send_message(chat_id, message_bot,)
    if call.data == 'actions_complex':
        message_bot = 'https://telegra.ph/Dejstvie-s-kompleksnymi-chislami-02-08'
        bot.send_message(chat_id, message_bot,)
    if call.data == 'complex_tfn_efn':
        message_bot = 'https://telegra.ph/Kompleksnye-chisla-v-trigonometricheskoj-i-pokazatelnoj-forme-zapisi-02-08'
        bot.send_message(chat_id, message_bot,)


def add_flag(user_id, flag: str):
    data_flag[user_id] = flag


def have_flag(user_id, flag: str):
    return data_flag.get(user_id) == flag


def del_flag(chat_id):
    data_flag.pop(chat_id, None)


try:
    # RUN
    bot.polling(none_stop=True)
except requests.exceptions.ReadTimeout as e:
    prog_logger.error(e)








